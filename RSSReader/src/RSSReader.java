import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Obsa Temesgen
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title<title>
     * <head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * </table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Output HTML opening tags

        out.println("<html>");
        out.println("<head>");

        int titleIndex = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        int descriptionIndex = getChildElement(channel, "description");

        // Output the title
        String pageTitle = "Empty Title";
        if (titleIndex != -1
                && channel.child(titleIndex).numberOfChildren() > 0) {
            pageTitle = channel.child(titleIndex).child(0).label();
        }
        out.println("<title>" + pageTitle + "</title>");

        out.println("</head>");
        out.println("<body>");

        // Output the page title inside a link to the channel link
        out.println("<h1>");
        String channelLink = "#";
        if (linkIndex != -1
                && channel.child(linkIndex).numberOfChildren() > 0) {
            channelLink = channel.child(linkIndex).child(0).label();
        }
        out.println("<a href=\"" + channelLink + "\">" + pageTitle + "</a>");
        out.println("</h1>");

        // Output the channel description
        out.println("<p>");
        String channelDescription = "No description";
        if (descriptionIndex != -1
                && channel.child(descriptionIndex).numberOfChildren() > 0) {
            channelDescription = channel.child(descriptionIndex).child(0)
                    .label();
        }
        out.println(channelDescription);
        out.println("</p>");

        // Output table for news items
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <table>
     * </table>
     * <body> <html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        // Output HTML closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        // Find the index of the first child with the given tag
        int index = -1;
        int i = 0;
        while (i < xml.numberOfChildren() && index == -1) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        // Process one news item and output one table row
        String publicationDate = "No date available";
        boolean foundPubDate = false;
        for (int i = 0; i < item.numberOfChildren() && !foundPubDate; i++) {
            if (item.child(i).label().equals("pubDate")
                    && item.child(i).numberOfChildren() > 0) {
                publicationDate = item.child(i).child(0).label();
                foundPubDate = true;
            }
        }
        if (!foundPubDate) {
            publicationDate = "No date available";
        }
        out.println("<td>" + publicationDate + "</td>");

        out.println("<td>");

        String sourceLink = "No source available";
        boolean foundSource = false;
        for (int i = 0; i < item.numberOfChildren() && !foundSource; i++) {
            if (item.child(i).label().equals("source")) {
                foundSource = true;
                if (item.child(i).numberOfChildren() > 0) {
                    sourceLink = "<a href=\"" + item.child(i).child(0).label()
                            + "\">" + item.child(i).child(0).label() + "</a>";
                } else {
                    sourceLink = "<a href=\"\">No source name</a>";
                }
            }
        }
        out.println("<td>" + sourceLink + "</td>");

        String articleLink = "No link available";
        boolean foundLink = false;
        for (int i = 0; i < item.numberOfChildren() && !foundLink; i++) {
            if (item.child(i).label().equals("link")
                    && item.child(i).numberOfChildren() > 0) {
                articleLink = "<a href=\"" + item.child(i).child(0).label()
                        + "\">" + item.child(i).child(0).label() + "</a>";
                foundLink = true;
            }
        }
        out.println("<td>" + articleLink + "</td>");
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree xmlTree = new XMLTree1(url);

        String rootLabel = xmlTree.label();
        String versionValue = xmlTree.attributeValue("version");

        // Check if it's a proper RSS 2.0 feed
        if (!rootLabel.equals("rss") || !versionValue.equals("2.0")) {
            out.println("Not a proper RSS 2.0 feed.");
            return;
        }

        // Open output stream for HTML file
        SimpleWriter outputWriter = new SimpleWriter1L(file);

        // Output HTML header
        XMLTree channel = xmlTree.child(0);
        outputHeader(channel, outputWriter);

        // Output channel description if available
        int descriptionIndex = getChildElement(channel, "description");
        if (descriptionIndex != -1) {
            String descriptionContent = channel.child(descriptionIndex).child(0)
                    .label();
            outputWriter.println("<p>" + descriptionContent + "</p>");
        }

        // Output table for news items
        outputWriter.println("<p>Table of latest news and headlines.</p>");
        outputWriter.println("<table>");
        outputWriter.println("<tr>");
        outputWriter.println("<td><strong>Date</strong></td>");
        outputWriter.println("<td><strong>Source</strong></td>");
        outputWriter.println("<td><strong>News</strong></td>");
        outputWriter.println("</tr>");

        // Process each news item
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            XMLTree child = channel.child(i);
            if (child.label().equals("item")) {
                processItem(child, outputWriter);
            }
        }

        outputWriter.println("</table>");

        outputFooter(outputWriter);

        outputWriter.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the name of the input XML file: ");
        String inputXmlFile = in.nextLine();
        out.print("Enter the name of the output HTML index file: ");
        String outputIndexFile = in.nextLine();

        XMLTree xmlTree = new XMLTree1(inputXmlFile);
        String feedsTitle = xmlTree.attributeValue("title");

        // Open output stream for HTML index file
        SimpleWriter indexOutputWriter = new SimpleWriter1L(outputIndexFile);

        // Write the HTML header for the index page
        indexOutputWriter.println(
                "<html><head><title>" + feedsTitle + "</title></head><body>");
        indexOutputWriter.println("<h1>" + feedsTitle + "</h1>");
        indexOutputWriter.println("<ul>");

        // Process each RSS feed and generate HTML pages
        for (int i = 0; i < xmlTree.numberOfChildren(); i++) {
            XMLTree feed = xmlTree.child(i);
            String feedUrl = feed.attributeValue("url");
            String feedName = feed.attributeValue("name");
            String feedFileName = feed.attributeValue("file");

            // Process the current feed
            processFeed(feedUrl, feedFileName, out);

            // Add link to the index page
            indexOutputWriter.println("<li><a href=\"" + feedFileName + "\">"
                    + feedName + "</a></li>");
        }

        // Write the HTML footer for the index page
        indexOutputWriter.println("</ul></body></html>");

        indexOutputWriter.close();
        in.close();
        out.close();
    }
}
